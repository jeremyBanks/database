name: Deno

on:
  push:
  create:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '44 4 * * 0'

jobs:
  deno:
    name: Deno
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: cache deno installation and deno.land dependencies
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-deno-${{ hashFiles('**/*') }}
          restore-keys: ${{ runner.os }}-deno-
          path: |
            /home/runner/.deno
            /home/runner/.cache/deno/deps/https/deno.land

      - name: install or update deno installation
        run: |
          export DENO_INSTALL="/home/runner/.deno"
          export PATH="${DENO_INSTALL}/bin:${PATH}"
          mkdir -p "${DENO_INSTALL}"
          deno upgrade || (
            curl -fsSL https://deno.land/x/install/install.sh > "${DENO_INSTALL}/.sh";
            sh "${DENO_INSTALL}/.sh"
          )
          deno upgrade
          deno --version
          deno info
          echo "DENO_INSTALL=${DENO_INSTALL}" >> "${GITHUB_ENV}"
          echo "PATH=${PATH}" >> "${GITHUB_ENV}"

      - name: build
        id: build
        run: |
          deno fmt

          git status
          declare had_changes="$(
            [[ -n "$(git status --porcelain)" ]] && echo true || echo false
          )"
          echo "::set-output name=had-changes::${had_changes}"

      - name: validate ./VERSION
        run: |
          declare version="$(eval "echo $(cat ./VERSION)")"
          deno eval '
            import * as semver from "https://deno.land/x/semver@v1.0.0/mod.ts";
            const [version] = Deno.args;
            if (semver.valid(version)) {
              console.log(`version is valid: ${version}`);
            } else {
              console.log(`version is NOT valid: ${version}`);
              Deno.exit(1);
            }
          ' "${version}"

      - run: deno test --allow-read

      - name: commit and push generated changes
        if: success() && steps.build.outputs.had-changes == 'true' && (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        run: |
          declare br="
          "
          declare branch="$(echo ${GITHUB_REF#refs/heads/})"
          declare date="$(git log -1 --pretty=format:'%ad')"
          declare short_hash="$(git rev-parse --short=8 HEAD)"
          declare short_subject="$(git log -1 --pretty=format:'%s')"
          declare short_subject="$(git log -1 --pretty=format:'%s')"
          if [[ ${#short_subject} -gt 50 ]]; then
            short_subject="${short_subject:0:49}…"
          fi
          declare suffixed_subject=" (${short_subject})"
          if [[ -z "${short_subject// }" ]]; then
            suffixed_subject=""
          fi
          declare author_name="$(git log -1 --pretty=format:'%an')"
          declare author_email="$(git log -1 --pretty=format:'%ae')"
          declare current_action_url="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${{ github.run_id }}"
          export GIT_AUTHOR_DATE="${date}"
          export GIT_AUTHOR_NAME="${author_name}"
          export GIT_AUTHOR_EMAIL="${author_email}"
          export GIT_COMMITTER_DATE="${date}"
          export GIT_COMMITTER_NAME="github-actions"
          export GIT_COMMITTER_EMAIL="41898282+github-actions[bot]@users.noreply.github.com"
          git remote rm origin
          git remote add origin "https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git"
          git checkout "${branch}"
          git add .
          git commit -m "⚙️ rebuild ${short_hash} ${suffixed_subject}${br}${br}${current_action_url}"
          git push --set-upstream origin "${branch}"

      - name: fail if source files modified during build but this action cannot push
        if: success() && steps.build.outputs.had-changes == 'true' && !(github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        run: |
          echo "source files modified during build but this action cannot push"
          git status
          exit 1
